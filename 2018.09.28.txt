2018.09.28
1.Git简介
1.1安装Git
1.2创建版本库
git init 把当前目标编程Git可以管理的仓库
git add 把文件添加到版本库(Windows 务必使用Notepad UTF-8 without BOM)
git commit -m "xxxxxx" -m表示本次提交说明务必要有意义
[master (root-commit) eaadf4e] wrote a readme file ――提交说明
 1 file changed, 2 insertions(+)	1个文件被改动 插入两行内容
 create mode 100644 readme.txt
git add 与git commit结合使用

2.时光穿梭机
git status 查看当前状态
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   2018.09.28.txt

no changes added to commit (use "git add" and/or "git commit -a")
修改了2018.09.28.txt但是还没有提交
git diff +file
diff --git a/2018.09.28.txt b/2018.09.28.txt
index 5db6954..ae34ca9 100644
--- a/2018.09.28.txt
+++ b/2018.09.28.txt
@@ -1,4 +1,7 @@
 2018.09.28
+1.Git<BC><F2><BD><E9>
+1.1<B0><B2>?Git
+1.2<B4><B4><BD><A8><B0>汾<BF><E2>
 git init <B0>?<B1>??<B1><EA><B1><E0><B3><CC>Git<BF><C9><D2>?<DC><C0><ED><B5>??<E2>
 git add <B0><D1><CE>?<FE><CC><ED><BC>?<BD><B0>汾<BF><E2>(Windows <CE><F1><B1><D8>?<D3><C3>Notepad UTF-8 without BOM)
 git commit -m "xxxxxx" -m<B1><ED>?<B1><BE><B4><CE><CC>??<C3><F7><CE><F1><B1><D8>?<D3><D0><D2><E2><D2><E5>
@@ -6,3 +9,16 @@ git commit -m "xxxxxx" -m
  1 file changed, 2 insertions(+)       1<B8><F6><CE>?<FE><B1><BB><B8>?<AF> <B2><E5><C8><EB><C1><BD><D0><D0><C4><DA>
<C8><DD>
  create mode 100644 readme.txt
 git add <D3><EB>git commit<BD><E1><BA><CF>?<D3><C3>
+
+2.?<B9>?<CB><F3><BB><FA>
+git status <B2>?<B5><B1>???
+On branch master
+Changes not staged for commit:
+  (use "git add <file>..." to update what will be committed)
+  (use "git checkout -- <file>..." to discard changes in working directory)
+
+        modified:   2018.09.28.txt
+
+no changes added to commit (use "git add" and/or "git commit -a")
+<D0>?<C4><C1><CB>2018.09.28.txt<B5><AB><CA>?<B9>?<D3><D0><CC>?
+git diff <B2>?<D0>?<C4><C4><DA><C8><DD>
\ No newline at end of file
当前修改版本与前一个版本的差别(目前不支持中文显示)
2.1 版本退回
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。（git log --pretty=oneline）

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

2.2 工作区和暂存区
能看到的目录(learngit)即为一个工作区
版本库(Repository)即.git
版本库包括了stage的暂存区以及Git自动创建的master分支，指向master的Head指针
git add 实际上把file添加到stage暂存区
git commit 实际上把stage的所有内容提交到当前分支
也就是说 不用添加一个文件就提交一次，可以多次添加修改文件之后再提交
